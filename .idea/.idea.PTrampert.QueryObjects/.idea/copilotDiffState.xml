<?xml version="1.0" encoding="UTF-8"?>
<project version="4">
  <component name="CopilotDiffPersistence">
    <option name="pendingDiffs">
      <map>
        <entry key="$PROJECT_DIR$/PTrampert.QueryObjects.Test/Attributes/GreaterThanOrEqualQueryAttributeTests.cs">
          <value>
            <PendingDiffInfo>
              <option name="filePath" value="$PROJECT_DIR$/PTrampert.QueryObjects.Test/Attributes/GreaterThanOrEqualQueryAttributeTests.cs" />
              <option name="updatedContent" value="using PTrampert.QueryObjects.Attributes;&#10;&#10;namespace PTrampert.QueryObjects.Test.Attributes;&#10;&#10;public class GreaterThanOrEqualQueryAttributeTests&#10;{&#10;    private record TestTarget&#10;    {&#10;        public int Value { get; init; }&#10;    }&#10;&#10;    private record TestQuery&#10;    {&#10;        [GreaterThanOrEqualQuery(nameof(TestTarget.Value))]&#10;        public int? Value { get; init; }&#10;    }&#10;&#10;    [Test]&#10;    public void GreaterThanOrEqualQueryAttribute_SelectsRecordsWithGreaterOrEqualValue()&#10;    {&#10;        var data = new List&lt;TestTarget&gt;&#10;        {&#10;            new() { Value = 1 },&#10;            new() { Value = 5 },&#10;            new() { Value = 10 }&#10;        };&#10;        var query = new TestQuery { Value = 5 };&#10;        var result = data.Where(query);&#10;        Assert.That(result, Is.EqualTo([data[1], data[2]]));&#10;    }&#10;}&#10;" />
            </PendingDiffInfo>
          </value>
        </entry>
        <entry key="$PROJECT_DIR$/PTrampert.QueryObjects.Test/Attributes/GreaterThanQueryAttributeTests.cs">
          <value>
            <PendingDiffInfo>
              <option name="filePath" value="$PROJECT_DIR$/PTrampert.QueryObjects.Test/Attributes/GreaterThanQueryAttributeTests.cs" />
              <option name="updatedContent" value="using PTrampert.QueryObjects.Attributes;&#10;&#10;namespace PTrampert.QueryObjects.Test.Attributes;&#10;&#10;public class GreaterThanQueryAttributeTests&#10;{&#10;    private record TestTarget&#10;    {&#10;        public int Value { get; init; }&#10;    }&#10;&#10;    private record TestQuery&#10;    {&#10;        [GreaterThanQuery(nameof(TestTarget.Value))]&#10;        public int? Value { get; init; }&#10;    }&#10;&#10;    [Test]&#10;    public void GreaterThanQueryAttribute_SelectsRecordsWithGreaterValue()&#10;    {&#10;        var data = new List&lt;TestTarget&gt;&#10;        {&#10;            new() { Value = 1 },&#10;            new() { Value = 5 },&#10;            new() { Value = 10 }&#10;        };&#10;        var query = new TestQuery { Value = 4 };&#10;        var result = data.Where(query);&#10;        Assert.That(result, Is.EqualTo([data[1], data[2]]));&#10;    }&#10;}&#10;" />
            </PendingDiffInfo>
          </value>
        </entry>
        <entry key="$PROJECT_DIR$/PTrampert.QueryObjects.Test/Attributes/LessThanOrEqualQueryAttributeTests.cs">
          <value>
            <PendingDiffInfo>
              <option name="filePath" value="$PROJECT_DIR$/PTrampert.QueryObjects.Test/Attributes/LessThanOrEqualQueryAttributeTests.cs" />
              <option name="updatedContent" value="using PTrampert.QueryObjects.Attributes;&#10;&#10;namespace PTrampert.QueryObjects.Test.Attributes;&#10;&#10;public class LessThanOrEqualQueryAttributeTests&#10;{&#10;    private record TestTarget&#10;    {&#10;        public int Value { get; init; }&#10;    }&#10;&#10;    private record TestQuery&#10;    {&#10;        [LessThanOrEqualQuery(nameof(TestTarget.Value))]&#10;        public int? Value { get; init; }&#10;    }&#10;&#10;    [Test]&#10;    public void LessThanOrEqualQueryAttribute_SelectsRecordsWithLessOrEqualValue()&#10;    {&#10;        var data = new List&lt;TestTarget&gt;&#10;        {&#10;            new() { Value = 1 },&#10;            new() { Value = 5 },&#10;            new() { Value = 10 }&#10;        };&#10;        var query = new TestQuery { Value = 5 };&#10;        var result = data.Where(query);&#10;        Assert.That(result, Is.EqualTo([data[0], data[1]]));&#10;    }&#10;}&#10;" />
            </PendingDiffInfo>
          </value>
        </entry>
        <entry key="$PROJECT_DIR$/PTrampert.QueryObjects.Test/Attributes/LessThanQueryAttributeTests.cs">
          <value>
            <PendingDiffInfo>
              <option name="filePath" value="$PROJECT_DIR$/PTrampert.QueryObjects.Test/Attributes/LessThanQueryAttributeTests.cs" />
              <option name="updatedContent" value="using PTrampert.QueryObjects.Attributes;&#10;&#10;namespace PTrampert.QueryObjects.Test.Attributes;&#10;&#10;public class LessThanQueryAttributeTests&#10;{&#10;    private record TestTarget&#10;    {&#10;        public int Value { get; init; }&#10;    }&#10;&#10;    private record TestQuery&#10;    {&#10;        [LessThanQuery(nameof(TestTarget.Value))]&#10;        public int? Value { get; init; }&#10;    }&#10;&#10;    [Test]&#10;    public void LessThanQueryAttribute_SelectsRecordsWithLessValue()&#10;    {&#10;        var data = new List&lt;TestTarget&gt;&#10;        {&#10;            new() { Value = 1 },&#10;            new() { Value = 5 },&#10;            new() { Value = 10 }&#10;        };&#10;        var query = new TestQuery { Value = 6 };&#10;        var result = data.Where(query);&#10;        Assert.That(result, Is.EqualTo([data[0], data[1]]));&#10;    }&#10;}&#10;" />
            </PendingDiffInfo>
          </value>
        </entry>
        <entry key="$PROJECT_DIR$/PTrampert.QueryObjects.Test/Attributes/NotEqualsQueryAttributeTests.cs">
          <value>
            <PendingDiffInfo>
              <option name="filePath" value="$PROJECT_DIR$/PTrampert.QueryObjects.Test/Attributes/NotEqualsQueryAttributeTests.cs" />
              <option name="updatedContent" value="using PTrampert.QueryObjects.Attributes;&#10;&#10;namespace PTrampert.QueryObjects.Test.Attributes;&#10;&#10;public class NotEqualsQueryAttributeTests&#10;{&#10;    private record TestTarget&#10;    {&#10;        public int Value { get; init; }&#10;    }&#10;&#10;    private record TestQuery&#10;    {&#10;        [NotEqualsQuery(nameof(TestTarget.Value))]&#10;        public int? Value { get; init; }&#10;    }&#10;&#10;    [Test]&#10;    public void NotEqualsQueryAttribute_SelectsRecordsWithNotEqualValue()&#10;    {&#10;        var data = new List&lt;TestTarget&gt;&#10;        {&#10;            new() { Value = 1 },&#10;            new() { Value = 5 },&#10;            new() { Value = 10 }&#10;        };&#10;        var query = new TestQuery { Value = 5 };&#10;        var result = data.Where(query);&#10;        Assert.That(result, Is.EqualTo([data[0], data[2]]));&#10;    }&#10;}&#10;" />
            </PendingDiffInfo>
          </value>
        </entry>
      </map>
    </option>
  </component>
</project>